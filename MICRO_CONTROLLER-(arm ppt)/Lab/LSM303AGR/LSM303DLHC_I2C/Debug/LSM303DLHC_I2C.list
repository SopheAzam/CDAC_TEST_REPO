
LSM303DLHC_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f60  08002f60  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f60  08002f60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000008c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082d5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001688  00000000  00000000  00028315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb98  00000000  00000000  0002a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098b4  00000000  00000000  00046290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a55a8  00000000  00000000  0004fb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f50ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ba0  00000000  00000000  000f5140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f18 	.word	0x08002f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002f18 	.word	0x08002f18

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faa7 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f901 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f98f 	bl	80004f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f94d 	bl	8000478 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   //1. Scan the I2C addresses
    	for(uint8_t i=0; i<255; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e012      	b.n	800020a <main+0x42>
    	{
    		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	b299      	uxth	r1, r3
 80001e8:	230a      	movs	r3, #10
 80001ea:	2201      	movs	r2, #1
 80001ec:	486a      	ldr	r0, [pc, #424]	; (8000398 <main+0x1d0>)
 80001ee:	f001 f851 	bl	8001294 <HAL_I2C_IsDeviceReady>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d105      	bne.n	8000204 <main+0x3c>
    		{
    			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	4867      	ldr	r0, [pc, #412]	; (800039c <main+0x1d4>)
 80001fe:	f000 fd91 	bl	8000d24 <HAL_GPIO_TogglePin>
    			break;
 8000202:	e005      	b.n	8000210 <main+0x48>
    	for(uint8_t i=0; i<255; i++)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	3301      	adds	r3, #1
 8000208:	71fb      	strb	r3, [r7, #7]
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2bff      	cmp	r3, #255	; 0xff
 800020e:	d1e9      	bne.n	80001e4 <main+0x1c>
    		}
    	}
    //2. I2C Write example
	//a)Configure MEMS: data rate, power mode, Enable X,Y,Z axes
	i2cBuf[0] = 0x20;			//Register address: CTRL_REG1_A (20h)
 8000210:	4b63      	ldr	r3, [pc, #396]	; (80003a0 <main+0x1d8>)
 8000212:	2220      	movs	r2, #32
 8000214:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x37;			//0x47 for Data rate 50 Hz, XYZ En, //0x37 for 25Hz ,XYZ En
 8000216:	4b62      	ldr	r3, [pc, #392]	; (80003a0 <main+0x1d8>)
 8000218:	2237      	movs	r2, #55	; 0x37
 800021a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 800021c:	230a      	movs	r3, #10
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2302      	movs	r3, #2
 8000222:	4a5f      	ldr	r2, [pc, #380]	; (80003a0 <main+0x1d8>)
 8000224:	2132      	movs	r1, #50	; 0x32
 8000226:	485c      	ldr	r0, [pc, #368]	; (8000398 <main+0x1d0>)
 8000228:	f000 fe26 	bl	8000e78 <HAL_I2C_Master_Transmit>
	//b) Configure MEMS: High Resolution Enable
	i2cBuf[0] = 0x23;			//Register address: CTRL_REG4_A (23h)
 800022c:	4b5c      	ldr	r3, [pc, #368]	; (80003a0 <main+0x1d8>)
 800022e:	2223      	movs	r2, #35	; 0x23
 8000230:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x30;			//0x08 for 2g, High Resol. Enable//0x10 for 4g//0x30 for 16g
 8000232:	4b5b      	ldr	r3, [pc, #364]	; (80003a0 <main+0x1d8>)
 8000234:	2230      	movs	r2, #48	; 0x30
 8000236:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 8000238:	230a      	movs	r3, #10
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2302      	movs	r3, #2
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <main+0x1d8>)
 8000240:	2132      	movs	r1, #50	; 0x32
 8000242:	4855      	ldr	r0, [pc, #340]	; (8000398 <main+0x1d0>)
 8000244:	f000 fe18 	bl	8000e78 <HAL_I2C_Master_Transmit>
	//c) Configure MEMS: Filter mode, cutoff frequency
	i2cBuf[0] = 0x21;			//Register address: CTRL_REG2_A (21h)
 8000248:	4b55      	ldr	r3, [pc, #340]	; (80003a0 <main+0x1d8>)
 800024a:	2221      	movs	r2, #33	; 0x21
 800024c:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x90;
 800024e:	4b54      	ldr	r3, [pc, #336]	; (80003a0 <main+0x1d8>)
 8000250:	2290      	movs	r2, #144	; 0x90
 8000252:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 8000254:	230a      	movs	r3, #10
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2302      	movs	r3, #2
 800025a:	4a51      	ldr	r2, [pc, #324]	; (80003a0 <main+0x1d8>)
 800025c:	2132      	movs	r1, #50	; 0x32
 800025e:	484e      	ldr	r0, [pc, #312]	; (8000398 <main+0x1d0>)
 8000260:	f000 fe0a 	bl	8000e78 <HAL_I2C_Master_Transmit>
  while (1)
  {
	  //4. Read accelerometer data
	  	  		//Request to read from a register
	  	  		//Register address: X_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x28, 1, &i2cBuf[1], 1, 10);
 8000264:	230a      	movs	r3, #10
 8000266:	9302      	str	r3, [sp, #8]
 8000268:	2301      	movs	r3, #1
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	4b4d      	ldr	r3, [pc, #308]	; (80003a4 <main+0x1dc>)
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2301      	movs	r3, #1
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2132      	movs	r1, #50	; 0x32
 8000276:	4848      	ldr	r0, [pc, #288]	; (8000398 <main+0x1d0>)
 8000278:	f000 fef2 	bl	8001060 <HAL_I2C_Mem_Read>
				//Register address: X_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x29, 1, &i2cBuf[2], 1, 10);
 800027c:	230a      	movs	r3, #10
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	4b48      	ldr	r3, [pc, #288]	; (80003a8 <main+0x1e0>)
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2301      	movs	r3, #1
 800028a:	2229      	movs	r2, #41	; 0x29
 800028c:	2132      	movs	r1, #50	; 0x32
 800028e:	4842      	ldr	r0, [pc, #264]	; (8000398 <main+0x1d0>)
 8000290:	f000 fee6 	bl	8001060 <HAL_I2C_Mem_Read>
	  	  		//Register address: Y_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2A, 1, &i2cBuf[3], 1, 10);
 8000294:	230a      	movs	r3, #10
 8000296:	9302      	str	r3, [sp, #8]
 8000298:	2301      	movs	r3, #1
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	4b43      	ldr	r3, [pc, #268]	; (80003ac <main+0x1e4>)
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2301      	movs	r3, #1
 80002a2:	222a      	movs	r2, #42	; 0x2a
 80002a4:	2132      	movs	r1, #50	; 0x32
 80002a6:	483c      	ldr	r0, [pc, #240]	; (8000398 <main+0x1d0>)
 80002a8:	f000 feda 	bl	8001060 <HAL_I2C_Mem_Read>
				//Register address: Y_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2B, 1, &i2cBuf[4], 1, 10);
 80002ac:	230a      	movs	r3, #10
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	2301      	movs	r3, #1
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	4b3e      	ldr	r3, [pc, #248]	; (80003b0 <main+0x1e8>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2301      	movs	r3, #1
 80002ba:	222b      	movs	r2, #43	; 0x2b
 80002bc:	2132      	movs	r1, #50	; 0x32
 80002be:	4836      	ldr	r0, [pc, #216]	; (8000398 <main+0x1d0>)
 80002c0:	f000 fece 	bl	8001060 <HAL_I2C_Mem_Read>
	  	  		//Register address: Z_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2C, 1, &i2cBuf[5], 1, 10);
 80002c4:	230a      	movs	r3, #10
 80002c6:	9302      	str	r3, [sp, #8]
 80002c8:	2301      	movs	r3, #1
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	4b39      	ldr	r3, [pc, #228]	; (80003b4 <main+0x1ec>)
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2301      	movs	r3, #1
 80002d2:	222c      	movs	r2, #44	; 0x2c
 80002d4:	2132      	movs	r1, #50	; 0x32
 80002d6:	4830      	ldr	r0, [pc, #192]	; (8000398 <main+0x1d0>)
 80002d8:	f000 fec2 	bl	8001060 <HAL_I2C_Mem_Read>
				//Register address: Z_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2D, 1, &i2cBuf[6], 1, 10);
 80002dc:	230a      	movs	r3, #10
 80002de:	9302      	str	r3, [sp, #8]
 80002e0:	2301      	movs	r3, #1
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	4b34      	ldr	r3, [pc, #208]	; (80003b8 <main+0x1f0>)
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	222d      	movs	r2, #45	; 0x2d
 80002ec:	2132      	movs	r1, #50	; 0x32
 80002ee:	482a      	ldr	r0, [pc, #168]	; (8000398 <main+0x1d0>)
 80002f0:	f000 feb6 	bl	8001060 <HAL_I2C_Mem_Read>
	  	  		ax = ((int16_t)((uint16_t)i2cBuf[2]<<8) | i2cBuf[1]);
 80002f4:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <main+0x1d8>)
 80002f6:	789b      	ldrb	r3, [r3, #2]
 80002f8:	021b      	lsls	r3, r3, #8
 80002fa:	b21a      	sxth	r2, r3
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <main+0x1d8>)
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	b21b      	sxth	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b21a      	sxth	r2, r3
 8000306:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <main+0x1f4>)
 8000308:	801a      	strh	r2, [r3, #0]
	  	  		ay = ((int16_t)((uint16_t)i2cBuf[4]<<8) | i2cBuf[3]);
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <main+0x1d8>)
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	b21a      	sxth	r2, r3
 8000312:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <main+0x1d8>)
 8000314:	78db      	ldrb	r3, [r3, #3]
 8000316:	b21b      	sxth	r3, r3
 8000318:	4313      	orrs	r3, r2
 800031a:	b21a      	sxth	r2, r3
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <main+0x1f8>)
 800031e:	801a      	strh	r2, [r3, #0]
	  	  		az = ((int16_t)((uint16_t)i2cBuf[6]<<8) | i2cBuf[5]);
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <main+0x1d8>)
 8000322:	799b      	ldrb	r3, [r3, #6]
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	b21a      	sxth	r2, r3
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <main+0x1d8>)
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	b21b      	sxth	r3, r3
 800032e:	4313      	orrs	r3, r2
 8000330:	b21a      	sxth	r2, r3
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <main+0x1fc>)
 8000334:	801a      	strh	r2, [r3, #0]

	  	  		Xaccel = ax * sensitivity;
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <main+0x1f4>)
 8000338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800033c:	461a      	mov	r2, r3
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <main+0x200>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	fb03 f302 	mul.w	r3, r3, r2
 8000346:	ee07 3a90 	vmov	s15, r3
 800034a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <main+0x204>)
 8000350:	edc3 7a00 	vstr	s15, [r3]
	  	  		Yaccel = ay * sensitivity;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <main+0x1f8>)
 8000356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800035a:	461a      	mov	r2, r3
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <main+0x200>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	fb03 f302 	mul.w	r3, r3, r2
 8000364:	ee07 3a90 	vmov	s15, r3
 8000368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <main+0x208>)
 800036e:	edc3 7a00 	vstr	s15, [r3]
	  	  		Zaccel = az * sensitivity;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0x1fc>)
 8000374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000378:	461a      	mov	r2, r3
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <main+0x200>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	fb03 f302 	mul.w	r3, r3, r2
 8000382:	ee07 3a90 	vmov	s15, r3
 8000386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <main+0x20c>)
 800038c:	edc3 7a00 	vstr	s15, [r3]
	  	  		HAL_Delay(50);
 8000390:	2032      	movs	r0, #50	; 0x32
 8000392:	f000 fa2b 	bl	80007ec <HAL_Delay>
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x28, 1, &i2cBuf[1], 1, 10);
 8000396:	e765      	b.n	8000264 <main+0x9c>
 8000398:	20000030 	.word	0x20000030
 800039c:	48001000 	.word	0x48001000
 80003a0:	2000008c 	.word	0x2000008c
 80003a4:	2000008d 	.word	0x2000008d
 80003a8:	2000008e 	.word	0x2000008e
 80003ac:	2000008f 	.word	0x2000008f
 80003b0:	20000090 	.word	0x20000090
 80003b4:	20000091 	.word	0x20000091
 80003b8:	20000092 	.word	0x20000092
 80003bc:	20000088 	.word	0x20000088
 80003c0:	20000094 	.word	0x20000094
 80003c4:	20000080 	.word	0x20000080
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000084 	.word	0x20000084
 80003d0:	2000002c 	.word	0x2000002c
 80003d4:	2000007c 	.word	0x2000007c

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09e      	sub	sp, #120	; 0x78
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fd8e 	bl	8002f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	223c      	movs	r2, #60	; 0x3c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fd80 	bl	8002f08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	2302      	movs	r3, #2
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	2301      	movs	r3, #1
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000410:	2310      	movs	r3, #16
 8000412:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000414:	2300      	movs	r3, #0
 8000416:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fab1 	bl	8001984 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000428:	f000 f8a6 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000430:	2300      	movs	r3, #0
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f002 f9a4 	bl	8002794 <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000452:	f000 f891 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000456:	2320      	movs	r3, #32
 8000458:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045e:	463b      	mov	r3, r7
 8000460:	4618      	mov	r0, r3
 8000462:	f002 fb7d 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800046c:	f000 f884 	bl	8000578 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3778      	adds	r7, #120	; 0x78
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_I2C1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_I2C1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_I2C1_Init+0x74>)
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MX_I2C1_Init+0x7c>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_I2C1_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <MX_I2C1_Init+0x74>)
 80004b4:	f000 fc50 	bl	8000d58 <HAL_I2C_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004be:	f000 f85b 	bl	8000578 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <MX_I2C1_Init+0x74>)
 80004c6:	f001 f9c5 	bl	8001854 <HAL_I2CEx_ConfigAnalogFilter>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f852 	bl	8000578 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d4:	2100      	movs	r1, #0
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_I2C1_Init+0x74>)
 80004d8:	f001 fa07 	bl	80018ea <HAL_I2CEx_ConfigDigitalFilter>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f849 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000030 	.word	0x20000030
 80004f0:	40005400 	.word	0x40005400
 80004f4:	2000090e 	.word	0x2000090e

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0x78>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_GPIO_Init+0x78>)
 8000514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x78>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x78>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <MX_GPIO_Init+0x78>)
 800052c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_GPIO_Init+0x78>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <MX_GPIO_Init+0x7c>)
 8000546:	f000 fbd5 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800054a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0x7c>)
 8000564:	f000 fa4c 	bl	8000a00 <HAL_GPIO_Init>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	48001000 	.word	0x48001000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_MspInit+0x44>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_I2C_MspInit+0x7c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d127      	bne.n	800063e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060a:	2312      	movs	r3, #18
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000616:	2304      	movs	r3, #4
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_I2C_MspInit+0x84>)
 8000622:	f000 f9ed 	bl	8000a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_I2C_MspInit+0x80>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_I2C_MspInit+0x80>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_I2C_MspInit+0x80>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40005400 	.word	0x40005400
 800064c:	40021000 	.word	0x40021000
 8000650:	48000400 	.word	0x48000400

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f884 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000704 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490e      	ldr	r1, [pc, #56]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0b      	ldr	r4, [pc, #44]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffd7 	bl	80006a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 fbe1 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fe:	f7ff fd63 	bl	80001c8 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000704:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000710:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 8000714:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000718:	2000009c 	.word	0x2000009c

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f931 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	200f      	movs	r0, #15
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff ff22 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f93b 	bl	80009e6 <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f911 	bl	80009ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000004 	.word	0x20000004
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	20000008 	.word	0x20000008

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x20>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x24>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_IncTick+0x24>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000098 	.word	0x20000098

080007d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetTick+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000098 	.word	0x20000098

080007ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff ffee 	bl	80007d4 <HAL_GetTick>
 80007f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000804:	d005      	beq.n	8000812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Delay+0x44>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000812:	bf00      	nop
 8000814:	f7ff ffde 	bl	80007d4 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <HAL_Delay+0x28>
  {
  }
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000000c 	.word	0x2000000c

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff47 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff5c 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff8e 	bl	80008ec <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffb0 	bl	8000954 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e154      	b.n	8000cba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8146 	beq.w	8000cb4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 0201 	and.w	r2, r3, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d123      	bne.n	8000b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	08da      	lsrs	r2, r3, #3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0203 	and.w	r2, r3, #3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80a0 	beq.w	8000cb4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <HAL_GPIO_Init+0x2d8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <HAL_GPIO_Init+0x2d8>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <HAL_GPIO_Init+0x2d8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8c:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb6:	d019      	beq.n	8000bec <HAL_GPIO_Init+0x1ec>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a49      	ldr	r2, [pc, #292]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d013      	beq.n	8000be8 <HAL_GPIO_Init+0x1e8>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <HAL_GPIO_Init+0x2e4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d00d      	beq.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <HAL_GPIO_Init+0x2e8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d007      	beq.n	8000be0 <HAL_GPIO_Init+0x1e0>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a46      	ldr	r2, [pc, #280]	; (8000cec <HAL_GPIO_Init+0x2ec>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d101      	bne.n	8000bdc <HAL_GPIO_Init+0x1dc>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e008      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bdc:	2305      	movs	r3, #5
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be0:	2303      	movs	r3, #3
 8000be2:	e004      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bec:	2300      	movs	r3, #0
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	f002 0203 	and.w	r2, r2, #3
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4093      	lsls	r3, r2
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfe:	4937      	ldr	r1, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c0c:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c30:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5a:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f aea3 	bne.w	8000a10 <HAL_GPIO_Init+0x10>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	48001000 	.word	0x48001000
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	041a      	lsls	r2, r3, #16
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43d9      	mvns	r1, r3
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	400b      	ands	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e081      	b.n	8000e6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d106      	bne.n	8000d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fc24 	bl	80005cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2224      	movs	r2, #36	; 0x24
 8000d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000da8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d107      	bne.n	8000dd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e006      	b.n	8000de0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d104      	bne.n	8000df2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691a      	ldr	r2, [r3, #16]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69d9      	ldr	r1, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1a      	ldr	r2, [r3, #32]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	460b      	mov	r3, r1
 8000e86:	817b      	strh	r3, [r7, #10]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b20      	cmp	r3, #32
 8000e96:	f040 80da 	bne.w	800104e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <HAL_I2C_Master_Transmit+0x30>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e0d3      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fc90 	bl	80007d4 <HAL_GetTick>
 8000eb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2319      	movs	r3, #25
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 fb66 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0be      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2221      	movs	r2, #33	; 0x21
 8000ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2210      	movs	r2, #16
 8000ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	893a      	ldrh	r2, [r7, #8]
 8000ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d90e      	bls.n	8000f22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	22ff      	movs	r2, #255	; 0xff
 8000f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	8979      	ldrh	r1, [r7, #10]
 8000f12:	4b51      	ldr	r3, [pc, #324]	; (8001058 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fc6c 	bl	80017f8 <I2C_TransferConfig>
 8000f20:	e06c      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	8979      	ldrh	r1, [r7, #10]
 8000f34:	4b48      	ldr	r3, [pc, #288]	; (8001058 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 fc5b 	bl	80017f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f42:	e05b      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	6a39      	ldr	r1, [r7, #32]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 fb63 	bl	8001614 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e07b      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f80:	3b01      	subs	r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d034      	beq.n	8000ffc <HAL_I2C_Master_Transmit+0x184>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d130      	bne.n	8000ffc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 faf5 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e04d      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	d90e      	bls.n	8000fdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	8979      	ldrh	r1, [r7, #10]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 fc0f 	bl	80017f8 <I2C_TransferConfig>
 8000fda:	e00f      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	8979      	ldrh	r1, [r7, #10]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 fbfe 	bl	80017f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001000:	b29b      	uxth	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d19e      	bne.n	8000f44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb42 	bl	8001694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e01a      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2220      	movs	r2, #32
 8001020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_I2C_Master_Transmit+0x1e4>)
 800102e:	400b      	ands	r3, r1
 8001030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2220      	movs	r2, #32
 8001036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800104e:	2302      	movs	r3, #2
  }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	80002000 	.word	0x80002000
 800105c:	fe00e800 	.word	0xfe00e800

08001060 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	817b      	strh	r3, [r7, #10]
 8001072:	460b      	mov	r3, r1
 8001074:	813b      	strh	r3, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b20      	cmp	r3, #32
 8001084:	f040 80fd 	bne.w	8001282 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <HAL_I2C_Mem_Read+0x34>
 800108e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0f1      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_I2C_Mem_Read+0x4e>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e0ea      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010b6:	f7ff fb8d 	bl	80007d4 <HAL_GetTick>
 80010ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2319      	movs	r3, #25
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 fa63 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0d5      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2222      	movs	r2, #34	; 0x22
 80010dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6a3a      	ldr	r2, [r7, #32]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001100:	88f8      	ldrh	r0, [r7, #6]
 8001102:	893a      	ldrh	r2, [r7, #8]
 8001104:	8979      	ldrh	r1, [r7, #10]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4603      	mov	r3, r0
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f9c7 	bl	80014a4 <I2C_RequestMemoryRead>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0ad      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d90e      	bls.n	8001150 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113c:	b2da      	uxtb	r2, r3
 800113e:	8979      	ldrh	r1, [r7, #10]
 8001140:	4b52      	ldr	r3, [pc, #328]	; (800128c <HAL_I2C_Mem_Read+0x22c>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 fb55 	bl	80017f8 <I2C_TransferConfig>
 800114e:	e00f      	b.n	8001170 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001154:	b29a      	uxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	b2da      	uxtb	r2, r3
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	4b4a      	ldr	r3, [pc, #296]	; (800128c <HAL_I2C_Mem_Read+0x22c>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 fb44 	bl	80017f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 fa0a 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e07c      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d034      	beq.n	8001230 <HAL_I2C_Mem_Read+0x1d0>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d130      	bne.n	8001230 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f9db 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e04d      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d90e      	bls.n	8001210 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	8979      	ldrh	r1, [r7, #10]
 8001200:	2300      	movs	r3, #0
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 faf5 	bl	80017f8 <I2C_TransferConfig>
 800120e:	e00f      	b.n	8001230 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001214:	b29a      	uxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121e:	b2da      	uxtb	r2, r3
 8001220:	8979      	ldrh	r1, [r7, #10]
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 fae4 	bl	80017f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001234:	b29b      	uxth	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d19a      	bne.n	8001170 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fa28 	bl	8001694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e01a      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2220      	movs	r2, #32
 8001254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_I2C_Mem_Read+0x230>)
 8001262:	400b      	ands	r3, r1
 8001264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2220      	movs	r2, #32
 800126a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001282:	2302      	movs	r3, #2
  }
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	80002400 	.word	0x80002400
 8001290:	fe00e800 	.word	0xfe00e800

08001294 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	460b      	mov	r3, r1
 80012a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	f040 80f1 	bne.w	8001498 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c4:	d101      	bne.n	80012ca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	e0e7      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_I2C_IsDeviceReady+0x44>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e0e0      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2224      	movs	r2, #36	; 0x24
 80012e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_I2C_IsDeviceReady+0x72>
 80012f6:	897b      	ldrh	r3, [r7, #10]
 80012f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001304:	e004      	b.n	8001310 <HAL_I2C_IsDeviceReady+0x7c>
 8001306:	897b      	ldrh	r3, [r7, #10]
 8001308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800130c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001316:	f7ff fa5d 	bl	80007d4 <HAL_GetTick>
 800131a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b20      	cmp	r3, #32
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b10      	cmp	r3, #16
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001348:	e034      	b.n	80013b4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d01a      	beq.n	8001388 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001352:	f7ff fa3f 	bl	80007d4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d302      	bcc.n	8001368 <HAL_I2C_IsDeviceReady+0xd4>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10f      	bne.n	8001388 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2220      	movs	r2, #32
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f043 0220 	orr.w	r2, r3, #32
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e088      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b20      	cmp	r3, #32
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_I2C_IsDeviceReady+0x12c>
 80013ba:	7fbb      	ldrb	r3, [r7, #30]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0c4      	beq.n	800134a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d01a      	beq.n	8001404 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f8db 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e058      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2220      	movs	r2, #32
 80013ee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	e04a      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f8c0 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e03d      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2210      	movs	r2, #16
 8001424:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2220      	movs	r2, #32
 800142c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d118      	bne.n	8001468 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001444:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f89f 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e01c      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2220      	movs	r2, #32
 8001466:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	f63f af3b 	bhi.w	80012ee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	f043 0220 	orr.w	r2, r3, #32
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	817b      	strh	r3, [r7, #10]
 80014b6:	460b      	mov	r3, r1
 80014b8:	813b      	strh	r3, [r7, #8]
 80014ba:	4613      	mov	r3, r2
 80014bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	8979      	ldrh	r1, [r7, #10]
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <I2C_RequestMemoryRead+0xa4>)
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f994 	bl	80017f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f89d 	bl	8001614 <I2C_WaitOnTXISFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e02c      	b.n	800153e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d105      	bne.n	80014f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ea:	893b      	ldrh	r3, [r7, #8]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
 80014f4:	e015      	b.n	8001522 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f883 	bl	8001614 <I2C_WaitOnTXISFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e012      	b.n	800153e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001518:	893b      	ldrh	r3, [r7, #8]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2200      	movs	r2, #0
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f831 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	80002000 	.word	0x80002000

0800154c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	619a      	str	r2, [r3, #24]
  }
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a4:	e022      	b.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d01e      	beq.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff f911 	bl	80007d4 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d113      	bne.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e00f      	b.n	800160c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4013      	ands	r3, r2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	429a      	cmp	r2, r3
 8001608:	d0cd      	beq.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001620:	e02c      	b.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f870 	bl	800170c <I2C_IsAcknowledgeFailed>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e02a      	b.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d01e      	beq.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff f8c9 	bl	80007d4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d113      	bne.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f043 0220 	orr.w	r2, r3, #32
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2220      	movs	r2, #32
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e007      	b.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d1cb      	bne.n	8001622 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a0:	e028      	b.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f830 	bl	800170c <I2C_IsAcknowledgeFailed>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e026      	b.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7ff f88d 	bl	80007d4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d113      	bne.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e007      	b.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d1cf      	bne.n	80016a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b10      	cmp	r3, #16
 8001724:	d161      	bne.n	80017ea <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001734:	d02b      	beq.n	800178e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001744:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001746:	e022      	b.n	800178e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174e:	d01e      	beq.n	800178e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001750:	f7ff f840 	bl	80007d4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d302      	bcc.n	8001766 <I2C_IsAcknowledgeFailed+0x5a>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d113      	bne.n	800178e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e02e      	b.n	80017ec <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b20      	cmp	r3, #32
 800179a:	d1d5      	bne.n	8001748 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fecd 	bl	800154c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <I2C_IsAcknowledgeFailed+0xe8>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2220      	movs	r2, #32
 80017d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	fe00e800 	.word	0xfe00e800

080017f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	817b      	strh	r3, [r7, #10]
 8001806:	4613      	mov	r3, r2
 8001808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	0d5b      	lsrs	r3, r3, #21
 8001814:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <I2C_TransferConfig+0x58>)
 800181a:	430b      	orrs	r3, r1
 800181c:	43db      	mvns	r3, r3
 800181e:	ea02 0103 	and.w	r1, r2, r3
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001828:	7a7b      	ldrb	r3, [r7, #9]
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	431a      	orrs	r2, r3
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	431a      	orrs	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	03ff63ff 	.word	0x03ff63ff

08001854 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b20      	cmp	r3, #32
 8001868:	d138      	bne.n	80018dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001874:	2302      	movs	r3, #2
 8001876:	e032      	b.n	80018de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	; 0x24
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d139      	bne.n	8001974 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800190a:	2302      	movs	r3, #2
 800190c:	e033      	b.n	8001976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2224      	movs	r2, #36	; 0x24
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800193c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e000      	b.n	8001976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001974:	2302      	movs	r3, #2
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800198a:	af00      	add	r7, sp, #0
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f000 bef4 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 816a 	beq.w	8001c82 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ae:	4bb3      	ldr	r3, [pc, #716]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ba:	4bb0      	ldr	r3, [pc, #704]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d159      	bne.n	8001a7a <HAL_RCC_OscConfig+0xf6>
 80019c6:	4bad      	ldr	r3, [pc, #692]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d2:	d152      	bne.n	8001a7a <HAL_RCC_OscConfig+0xf6>
 80019d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x82>
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0xae>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a2e:	4b93      	ldr	r3, [pc, #588]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a3e:	fa92 f2a2 	rbit	r2, r2
 8001a42:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a46:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a4a:	fab2 f282 	clz	r2, r2
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f002 021f 	and.w	r2, r2, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 810c 	beq.w	8001c80 <HAL_RCC_OscConfig+0x2fc>
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 8106 	bne.w	8001c80 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f000 be86 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x110>
 8001a86:	4b7d      	ldr	r3, [pc, #500]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7c      	ldr	r2, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e030      	b.n	8001af6 <HAL_RCC_OscConfig+0x172>
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x134>
 8001a9e:	4b77      	ldr	r3, [pc, #476]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a76      	ldr	r2, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b74      	ldr	r3, [pc, #464]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a73      	ldr	r2, [pc, #460]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01e      	b.n	8001af6 <HAL_RCC_OscConfig+0x172>
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x15a>
 8001ac4:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x172>
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a66      	ldr	r2, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a63      	ldr	r2, [pc, #396]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f023 020f 	bic.w	r2, r3, #15
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	495d      	ldr	r1, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d059      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe fe5e 	bl	80007d4 <HAL_GetTick>
 8001b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7fe fe59 	bl	80007d4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d902      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	f000 be29 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x1e2>
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x20e>
 8001b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b82:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b9e:	fa92 f2a2 	rbit	r2, r2
 8001ba2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ba6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001baa:	fab2 f282 	clz	r2, r2
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f002 021f 	and.w	r2, r2, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ab      	beq.n	8001b1e <HAL_RCC_OscConfig+0x19a>
 8001bc6:	e05c      	b.n	8001c82 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fe04 	bl	80007d4 <HAL_GetTick>
 8001bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd2:	f7fe fdff 	bl	80007d4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d902      	bls.n	8001be8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f000 bdcf 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bfc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x296>
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x2c2>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_RCC_OscConfig+0x2f8>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c5a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ab      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x24e>
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_OscConfig+0x2fe>
 8001c7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 816f 	beq.w	8001f70 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c92:	4bd0      	ldr	r3, [pc, #832]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9e:	4bcd      	ldr	r3, [pc, #820]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d16c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x400>
 8001caa:	4bca      	ldr	r3, [pc, #808]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d166      	bne.n	8001d84 <HAL_RCC_OscConfig+0x400>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x362>
 8001ce0:	4bbc      	ldr	r3, [pc, #752]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e013      	b.n	8001d0e <HAL_RCC_OscConfig+0x38a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001cfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d0a:	4bb2      	ldr	r3, [pc, #712]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d14:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d20:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 bd1b 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4ba0      	ldr	r3, [pc, #640]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	21f8      	movs	r1, #248	; 0xf8
 8001d60:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d68:	fa91 f1a1 	rbit	r1, r1
 8001d6c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d70:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d74:	fab1 f181 	clz	r1, r1
 8001d78:	b2c9      	uxtb	r1, r1
 8001d7a:	408b      	lsls	r3, r1
 8001d7c:	4995      	ldr	r1, [pc, #596]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e0f5      	b.n	8001f70 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8085 	beq.w	8001e9a <HAL_RCC_OscConfig+0x516>
 8001d90:	2301      	movs	r3, #1
 8001d92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001da2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fd0a 	bl	80007d4 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7fe fd05 	bl	80007d4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d902      	bls.n	8001ddc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f000 bcd5 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001dee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0x488>
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x4b0>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2202      	movs	r2, #2
 8001e36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e3e:	fa92 f2a2 	rbit	r2, r2
 8001e42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f002 021f 	and.w	r2, r2, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0af      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	21f8      	movs	r1, #248	; 0xf8
 8001e76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e7e:	fa91 f1a1 	rbit	r1, r1
 8001e82:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e86:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e8a:	fab1 f181 	clz	r1, r1
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	408b      	lsls	r3, r1
 8001e92:	4950      	ldr	r1, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e06a      	b.n	8001f70 <HAL_RCC_OscConfig+0x5ec>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fc85 	bl	80007d4 <HAL_GetTick>
 8001eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7fe fc80 	bl	80007d4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d902      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f000 bc50 	b.w	8002786 <HAL_RCC_OscConfig+0xe02>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_RCC_OscConfig+0x592>
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	e013      	b.n	8001f3e <HAL_RCC_OscConfig+0x5ba>
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f28:	2302      	movs	r3, #2
 8001f2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCC_OscConfig+0x650>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f44:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f48:	fa92 f2a2 	rbit	r2, r2
 8001f4c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f002 021f 	and.w	r2, r2, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1af      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80da 	beq.w	8002134 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d069      	beq.n	800205e <HAL_RCC_OscConfig+0x6da>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x654>)
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fc0e 	bl	80007d4 <HAL_GetTick>
 8001fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbc:	e00e      	b.n	8001fdc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fc09 	bl	80007d4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d906      	bls.n	8001fdc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e3d9      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	10908120 	.word	0x10908120
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001fee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800201c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4ba5      	ldr	r3, [pc, #660]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002022:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002026:	2102      	movs	r1, #2
 8002028:	6019      	str	r1, [r3, #0]
 800202a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f1a3 	rbit	r1, r3
 8002034:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002038:	6019      	str	r1, [r3, #0]
  return result;
 800203a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0b0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x63a>
 800205c:	e06a      	b.n	8002134 <HAL_RCC_OscConfig+0x7b0>
 800205e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002074:	601a      	str	r2, [r3, #0]
  return result;
 8002076:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800207a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7fe fba0 	bl	80007d4 <HAL_GetTick>
 8002094:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	e009      	b.n	80020ae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209a:	f7fe fb9b 	bl	80007d4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e36b      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 80020ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020ca:	2202      	movs	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f6:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020fe:	2102      	movs	r1, #2
 8002100:	6019      	str	r1, [r3, #0]
 8002102:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f1a3 	rbit	r1, r3
 800210c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002110:	6019      	str	r1, [r3, #0]
  return result;
 8002112:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1b2      	bne.n	800209a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8158 	beq.w	80023f4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b54      	ldr	r3, [pc, #336]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d11a      	bne.n	80021be <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002194:	f7fe fb1e 	bl	80007d4 <HAL_GetTick>
 8002198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e009      	b.n	80021b2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe fb19 	bl	80007d4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e2e9      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ef      	beq.n	800219e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x852>
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e02f      	b.n	8002236 <HAL_RCC_OscConfig+0x8b2>
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x876>
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e01d      	b.n	8002236 <HAL_RCC_OscConfig+0x8b2>
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x89a>
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x8b2>
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06b      	beq.n	8002318 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fac8 	bl	80007d4 <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fac3 	bl	80007d4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e291      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 8002262:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002266:	2202      	movs	r2, #2
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002296:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d109      	bne.n	80022c0 <HAL_RCC_OscConfig+0x93c>
 80022ac:	4b01      	ldr	r3, [pc, #4]	; (80022b4 <HAL_RCC_OscConfig+0x930>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x958>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	10908120 	.word	0x10908120
 80022bc:	40007000 	.word	0x40007000
 80022c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	4bbb      	ldr	r3, [pc, #748]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022e0:	2102      	movs	r1, #2
 80022e2:	6011      	str	r1, [r2, #0]
 80022e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	fa92 f1a2 	rbit	r1, r2
 80022ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022f2:	6011      	str	r1, [r2, #0]
  return result;
 80022f4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d099      	beq.n	800224a <HAL_RCC_OscConfig+0x8c6>
 8002316:	e063      	b.n	80023e0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7fe fa5c 	bl	80007d4 <HAL_GetTick>
 800231c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fa57 	bl	80007d4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e225      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 800233a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800233e:	2202      	movs	r2, #2
 8002340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002356:	2202      	movs	r2, #2
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002368:	601a      	str	r2, [r3, #0]
  return result;
 800236a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800236e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0xa06>
 8002384:	4b90      	ldr	r3, [pc, #576]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	e00d      	b.n	80023a6 <HAL_RCC_OscConfig+0xa22>
 800238a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800238e:	2202      	movs	r2, #2
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023aa:	2102      	movs	r1, #2
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	fa92 f1a2 	rbit	r1, r2
 80023b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023bc:	6011      	str	r1, [r2, #0]
  return result;
 80023be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f002 021f 	and.w	r2, r2, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1a0      	bne.n	8002322 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a76      	ldr	r2, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 81c2 	beq.w	8002784 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002400:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	f000 819c 	beq.w	8002746 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b02      	cmp	r3, #2
 8002416:	f040 8114 	bne.w	8002642 <HAL_RCC_OscConfig+0xcbe>
 800241a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800241e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002432:	601a      	str	r2, [r3, #0]
  return result;
 8002434:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002438:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	461a      	mov	r2, r3
 800244c:	2300      	movs	r3, #0
 800244e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe f9c0 	bl	80007d4 <HAL_GetTick>
 8002454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e009      	b.n	800246e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe f9bb 	bl	80007d4 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e18b      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 800246e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002472:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002486:	601a      	str	r2, [r3, #0]
  return result;
 8002488:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800248c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_OscConfig+0xb24>
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	e01b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb5c>
 80024a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fa92 f1a2 	rbit	r1, r2
 80024f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024f8:	6011      	str	r1, [r2, #0]
  return result;
 80024fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fab2 f282 	clz	r2, r2
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f002 021f 	and.w	r2, r2, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d19e      	bne.n	800245a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	430b      	orrs	r3, r1
 8002532:	4925      	ldr	r1, [pc, #148]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800253c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002550:	601a      	str	r2, [r3, #0]
  return result;
 8002552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002556:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002562:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe f931 	bl	80007d4 <HAL_GetTick>
 8002572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002576:	e009      	b.n	800258c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe f92c 	bl	80007d4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0fc      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 800258c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025a4:	601a      	str	r2, [r3, #0]
  return result;
 80025a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0xc48>
 80025c0:	4b01      	ldr	r3, [pc, #4]	; (80025c8 <HAL_RCC_OscConfig+0xc44>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e01e      	b.n	8002604 <HAL_RCC_OscConfig+0xc80>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	fa93 f2a3 	rbit	r2, r3
 80025fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_OscConfig+0xe0c>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002608:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	fa92 f1a2 	rbit	r1, r2
 8002618:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800261c:	6011      	str	r1, [r2, #0]
  return result;
 800261e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d09b      	beq.n	8002578 <HAL_RCC_OscConfig+0xbf4>
 8002640:	e0a0      	b.n	8002784 <HAL_RCC_OscConfig+0xe00>
 8002642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265a:	601a      	str	r2, [r3, #0]
  return result;
 800265c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002660:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800266c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	461a      	mov	r2, r3
 8002674:	2300      	movs	r3, #0
 8002676:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f8ac 	bl	80007d4 <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe f8a7 	bl	80007d4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e077      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	601a      	str	r2, [r3, #0]
  return result;
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0xd4c>
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_OscConfig+0xe0c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e01b      	b.n	8002708 <HAL_RCC_OscConfig+0xd84>
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f107 0320 	add.w	r3, r7, #32
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f107 0318 	add.w	r3, r7, #24
 80026ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f107 0318 	add.w	r3, r7, #24
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_OscConfig+0xe0c>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f107 0210 	add.w	r2, r7, #16
 800270c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002710:	6011      	str	r1, [r2, #0]
 8002712:	f107 0210 	add.w	r2, r7, #16
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	fa92 f1a2 	rbit	r1, r2
 800271c:	f107 020c 	add.w	r2, r7, #12
 8002720:	6011      	str	r1, [r2, #0]
  return result;
 8002722:	f107 020c 	add.w	r2, r7, #12
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	fab2 f282 	clz	r2, r2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f002 021f 	and.w	r2, r2, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f202 	lsl.w	r2, r1, r2
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d19e      	bne.n	8002682 <HAL_RCC_OscConfig+0xcfe>
 8002744:	e01e      	b.n	8002784 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e018      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_RCC_OscConfig+0xe0c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	429a      	cmp	r2, r3
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800276e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b09e      	sub	sp, #120	; 0x78
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e162      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b90      	ldr	r3, [pc, #576]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b8d      	ldr	r3, [pc, #564]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	498b      	ldr	r1, [pc, #556]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e14a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	497f      	ldr	r1, [pc, #508]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80dc 	beq.w	80029c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d13c      	bne.n	800288a <HAL_RCC_ClockConfig+0xf6>
 8002810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_ClockConfig+0xa6>
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e00f      	b.n	800285a <HAL_RCC_ClockConfig+0xc6>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	667b      	str	r3, [r7, #100]	; 0x64
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	663b      	str	r3, [r7, #96]	; 0x60
 800284e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002856:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d17b      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0f3      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d13c      	bne.n	800290c <HAL_RCC_ClockConfig+0x178>
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_ClockConfig+0x128>
 80028b6:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_ClockConfig+0x148>
 80028bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
 80028d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80028e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f002 021f 	and.w	r2, r2, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d13a      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b2      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_ClockConfig+0x1a0>
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e00d      	b.n	8002950 <HAL_RCC_ClockConfig+0x1bc>
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2202      	movs	r2, #2
 8002952:	61ba      	str	r2, [r7, #24]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	617a      	str	r2, [r7, #20]
  return result;
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e079      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fd ff20 	bl	80007d4 <HAL_GetTick>
 8002994:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fd ff1c 	bl	80007d4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e061      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d214      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4906      	ldr	r1, [pc, #24]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e040      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	491a      	ldr	r1, [pc, #104]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4912      	ldr	r1, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a36:	f000 f829 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	22f0      	movs	r2, #240	; 0xf0
 8002a46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fab2 f282 	clz	r2, r2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	40d3      	lsrs	r3, r2
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x2ec>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_RCC_ClockConfig+0x2f0>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_ClockConfig+0x2f4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fe6e 	bl	800074c <HAL_InitTick>
  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3778      	adds	r7, #120	; 0x78
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08002f30 	.word	0x08002f30
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08b      	sub	sp, #44	; 0x2c
 8002a90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x30>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aba:	e03c      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abe:	623b      	str	r3, [r7, #32]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ac8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002acc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	607a      	str	r2, [r7, #4]
  return result;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	220f      	movs	r2, #15
 8002af0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	60fa      	str	r2, [r7, #12]
  return result;
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	40d3      	lsrs	r3, r2
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b38:	623b      	str	r3, [r7, #32]
      break;
 8002b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	372c      	adds	r7, #44	; 0x2c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	08002f40 	.word	0x08002f40
 8002b58:	08002f50 	.word	0x08002f50
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	; 0x48
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80d4 	beq.w	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b84:	4b4e      	ldr	r3, [pc, #312]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	61d3      	str	r3, [r2, #28]
 8002b9c:	4b48      	ldr	r3, [pc, #288]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a41      	ldr	r2, [pc, #260]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fe05 	bl	80007d4 <HAL_GetTick>
 8002bca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fd fe01 	bl	80007d4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e169      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8084 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d07c      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fd fdb1 	bl	80007d4 <HAL_GetTick>
 8002c72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fd fdad 	bl	80007d4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e113      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cba:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	e00d      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	10908100 	.word	0x10908100
 8002ccc:	2302      	movs	r3, #2
 8002cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	613a      	str	r2, [r7, #16]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0b7      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d06:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	496a      	ldr	r1, [pc, #424]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	495d      	ldr	r1, [pc, #372]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d56:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4956      	ldr	r1, [pc, #344]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	494e      	ldr	r1, [pc, #312]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4947      	ldr	r1, [pc, #284]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002db0:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	493f      	ldr	r1, [pc, #252]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f023 0220 	bic.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4938      	ldr	r1, [pc, #224]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	4930      	ldr	r1, [pc, #192]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	4929      	ldr	r1, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4921      	ldr	r1, [pc, #132]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	491a      	ldr	r1, [pc, #104]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	4912      	ldr	r1, [pc, #72]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	490b      	ldr	r1, [pc, #44]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3748      	adds	r7, #72	; 0x48
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4d0d      	ldr	r5, [pc, #52]	; (8002ef8 <__libc_init_array+0x38>)
 8002ec4:	4c0d      	ldr	r4, [pc, #52]	; (8002efc <__libc_init_array+0x3c>)
 8002ec6:	1b64      	subs	r4, r4, r5
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	2600      	movs	r6, #0
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	4d0b      	ldr	r5, [pc, #44]	; (8002f00 <__libc_init_array+0x40>)
 8002ed2:	4c0c      	ldr	r4, [pc, #48]	; (8002f04 <__libc_init_array+0x44>)
 8002ed4:	f000 f820 	bl	8002f18 <_init>
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	2600      	movs	r6, #0
 8002ede:	42a6      	cmp	r6, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee8:	4798      	blx	r3
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef2:	4798      	blx	r3
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	08002f60 	.word	0x08002f60
 8002efc:	08002f60 	.word	0x08002f60
 8002f00:	08002f60 	.word	0x08002f60
 8002f04:	08002f64 	.word	0x08002f64

08002f08 <memset>:
 8002f08:	4402      	add	r2, r0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d100      	bne.n	8002f12 <memset+0xa>
 8002f10:	4770      	bx	lr
 8002f12:	f803 1b01 	strb.w	r1, [r3], #1
 8002f16:	e7f9      	b.n	8002f0c <memset+0x4>

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
